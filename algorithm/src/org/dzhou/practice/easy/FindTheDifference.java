package org.dzhou.practice.easy;

import java.util.HashMap;
import java.util.Map;

/**
 * Given two strings s and t which consist of only lowercase letters.
 * 
 * String t is generated by random shuffling string s and then add one more
 * letter at a random position.
 * 
 * Find the letter that was added in t.
 * 
 * Example:
 * 
 * Input: <br>
 * s = "abcd" <br>
 * t = "abcde" <br>
 * 
 * Output: e
 * 
 * Explanation: 'e' is the letter that was added.
 * 
 * @author zhoudong
 *
 */

public class FindTheDifference {

	public class Solution {
		public char findTheDifference(String s, String t) {
			int bit1 = createBit(s);
			int bit2 = createBit(t);
			for (int i = 0; i < 32; i++) {
				if (isOne(bit1, i) != isOne(bit2, i)) {
					return Character.toChars(i + 'a')[0];
				}
			}
			return ' ';
		}

		private int createBit(String str) {
			int bit = 0;
			for (char c : str.toCharArray()) {
				int index = c - 'a';
				if (isOne(bit, index)) {
					bit = oneToZero(bit, index);
				} else {
					bit = zeroToOne(bit, index);
				}
			}
			return bit;
		}

		private int oneToZero(int bit, int index) {
			int mask = ~(1 << index);
			return bit & mask;
		}

		private int zeroToOne(int bit, int index) {
			int mask = 1 << index;
			return bit | mask;
		}

		private boolean isOne(int bit, int index) {
			int mask = 1 << index;
			return (mask & bit) > 0;
		}
	}

	public class Solution1 {
		public char findTheDifference(String s, String t) {
			Map<Character, Integer> map = new HashMap<>();
			for (char c : s.toCharArray()) {
				if (map.containsKey(c)) {
					map.put(c, map.get(c) + 1);
				} else {
					map.put(c, 1);
				}
			}
			for (char c : t.toCharArray()) {
				if (!map.containsKey(c))
					return c;
				int count = map.get(c);
				if (count == 1)
					map.remove(c);
				else {
					map.put(c, count - 1);
				}
			}
			return ' ';
		}
	}

}
